'use strict';var _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_react=require('react'),_react2=_interopRequireDefault(_react),_enzyme=require('enzyme'),_formBuilder=require('../../main/forms/formBuilder'),_formBuilder2=_interopRequireDefault(_formBuilder),_formError=require('../../main/forms/formError'),_formError2=_interopRequireDefault(_formError);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}describe('formBuilder',function(){describe('Iterates through each child and decorates all form elements\n    with the given callback handlers, error message, values etc.',function(){var a,b,c,d,e,f={invalidateEvent:'onBlur',validateEvent:'onChange'};beforeEach(function(){c={errors:{firstName:['error text']},values:{firstName:'John'}}}),beforeEach(function(){b={onValidateMock:function onValidateMock(){return!0},onInvalidateMock:function onInvalidateMock(){return!0},onFocusMock:function onFocusMock(){return!0},onBlurMock:function onBlurMock(){return!0},onFocusFromJsx:function onFocusFromJsx(){return!0},onChangeMock:function onChangeMock(){return!0},onChangeFromJsx:function onChangeFromJsx(){return!0},onBlurFromJsx:function onBlurFromJsx(){return!0},onClickFromJsx:function onClickFromJsx(){return!0}},spyOn(b,'onInvalidateMock'),spyOn(b,'onValidateMock'),spyOn(b,'onChangeMock'),spyOn(b,'onFocusMock'),spyOn(b,'onBlurMock'),spyOn(b,'onChangeFromJsx'),spyOn(b,'onBlurFromJsx'),spyOn(b,'onClickFromJsx'),spyOn(b,'onFocusFromJsx')}),beforeEach(function(){a=(0,_enzyme.shallow)(_react2.default.createElement('div',null,_react2.default.createElement('h2',null,'title here ',_react2.default.createElement('span',{className:'icon-empty'}),' '),_react2.default.createElement('div',null,'some string goes here',_react2.default.createElement('input',{type:'text',name:'firstName',id:'firstName',onFocus:b.onFocusFromJsx,onChange:b.onChangeFromJsx,onBlur:b.onBlurFromJsx,onClick:b.onClickFromJsx}),_react2.default.createElement(_formError2.default,{forInput:'firstName'}),_react2.default.createElement('div',null,_react2.default.createElement('input',{type:'checkbox',name:'remember',id:'remember'}),_react2.default.createElement('input',{type:'radio',name:'radio1',id:'radioOption1'}),_react2.default.createElement('input',{type:'radio',name:'radio1',id:'radioOption2'})))))}),beforeEach(function(){d=(0,_formBuilder2.default)(_extends({children:a.prop('children'),errors:c.errors,values:c.values,onFocus:b.onFocusMock,onBlur:b.onBlurMock,onValidate:b.onValidateMock,onInvalidate:b.onInvalidateMock,onValueChange:b.onChangeMock},f)),e=(0,_enzyme.shallow)(_react2.default.createElement('div',null,d))}),it('SHOULD clone nested elements',function(){expect(e.find('h2').length).toBe(1),expect(e.find('#firstName').length).toBe(1),expect(e.find('#remember').length).toBe(1)}),it('SHOULD attach error messages',function(){expect(e.find(_formError2.default).prop('msg')).toBe(c.errors.firstName[0])}),it('SHOULD merge existing onClick props that are passed via JSX',function(){e.find('#firstName').simulate('click'),expect(b.onClickFromJsx).toHaveBeenCalled()}),it('SHOULD merge existing onFocus props that are passed via JSX',function(){e.find('#firstName').simulate('focus'),expect(b.onFocusFromJsx).toHaveBeenCalled()}),it('SHOULD throw an error if a form element has no name',function(){var a=_formBuilder2.default.bind(null,_extends({children:_react2.default.createElement('input',{type:'text'}),errors:c.errors,values:c.values,onValidate:b.onValidateMock,onInvalidate:b.onInvalidateMock,onValueChange:b.onChangeMock},f));expect(a).toThrowError()}),describe('WHEN form needs to do nothing because value has not changed',function(){beforeEach(function(){e.find('#firstName').simulate('focus',{target:{value:''}})}),beforeEach(function(){e.find('#firstName').simulate('blur',{target:{value:''}})}),it('SHOULD NOT attach callback handlers',function(){expect(b.onInvalidateMock).not.toHaveBeenCalled(),expect(b.onValidateMock).not.toHaveBeenCalled(),expect(b.onChangeMock).not.toHaveBeenCalled()}),it('SHOULD NOT merge existing onBlur handlers that are passed via JSX',function(){expect(b.onChangeFromJsx).not.toHaveBeenCalled(),expect(b.onBlurFromJsx).not.toHaveBeenCalled()})}),describe('WHEN form needs to call invalidate',function(){beforeEach(function(){e.find('#firstName').simulate('focus',{target:{value:''}})}),beforeEach(function(){e.find('#firstName').simulate('blur',{target:{value:'change value'}})}),it('SHOULD call onValidate callback ONLY',function(){expect(b.onInvalidateMock).toHaveBeenCalled(),expect(b.onValidateMock).not.toHaveBeenCalled(),expect(b.onChangeMock).not.toHaveBeenCalled()}),it('SHOULD merge existing onBlur handlers that are passed via JSX',function(){expect(b.onChangeFromJsx).not.toHaveBeenCalled(),expect(b.onBlurFromJsx).toHaveBeenCalled()})}),describe('WHEN form needs to call validate',function(){beforeEach(function(){e.find('#firstName').simulate('change',{target:{value:'change value'}})}),it('SHOULD call onInvalidate and onChange callbacks ONLY',function(){expect(b.onInvalidateMock).not.toHaveBeenCalled(),expect(b.onValidateMock).toHaveBeenCalled(),expect(b.onChangeMock).toHaveBeenCalled()}),it('SHOULD merge existing onChange handlers that are passed via JSX',function(){expect(b.onChangeFromJsx).toHaveBeenCalled(),expect(b.onBlurFromJsx).not.toHaveBeenCalled()})})})});