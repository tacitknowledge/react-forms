'use strict';var _formReducer=require('../../main/forms/formReducer'),_formReducer2=_interopRequireDefault(_formReducer),_formConstants=require('../../main/forms/formConstants'),CONST=_interopRequireWildcard(_formConstants);function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}describe('Form Reducer',function(){var a,b='Giftcard';beforeEach(function(){a={Forms:{Giftcard:{errors:{"gx-pin":['I am an error message']}}}}}),describe('WHEN action type does not exist',function(){it('SHOULD return the last know state',function(){var a=(0,_formReducer2.default)({oldMember:1},{type:'NON_EXISTENT'});expect(a).toHaveMember('oldMember')})}),describe('FORM_INITIAL_DATA',function(){describe('WHEN initial values AND/OR errors are given',function(){it('SHOULD return the given values as part of the state',function(){var a='1234',c=(0,_formReducer2.default)({},{type:CONST.FORM_INITIAL_DATA,formName:b,values:{"gx-pin":a}});expect(c[b].values).toBeNonEmptyObject(),expect(c[b].values).toImplement({"gx-pin":String}),expect(c[b].values['gx-pin']).toBe(a)}),it('SHOULD return the given errors as part of the state',function(){var a='this is an error',c=(0,_formReducer2.default)({},{type:CONST.FORM_INITIAL_DATA,formName:b,errors:{"gx-pin":[a]}});expect(c[b].errors).toBeNonEmptyObject(),expect(c[b].errors).toImplement({"gx-pin":Array}),expect(c[b].errors['gx-pin'][0]).toBe(a)})})}),describe('FORM_DATA_REPLACE',function(){describe('WHEN values AND/OR errors are given',function(){it('SHOULD return the given values as part of the state',function(){var a='1234',c=(0,_formReducer2.default)({},{type:CONST.FORM_DATA_REPLACE,formName:b,values:{"gx-pin":a}});expect(c[b].values).toBeNonEmptyObject(),expect(c[b].values).toImplement({"gx-pin":String}),expect(c[b].values['gx-pin']).toBe(a)}),it('SHOULD return the given errors as part of the state',function(){var a='this is an error',c=(0,_formReducer2.default)({},{type:CONST.FORM_DATA_REPLACE,formName:b,errors:{"gx-pin":[a]}});expect(c[b].errors).toBeNonEmptyObject(),expect(c[b].errors).toImplement({"gx-pin":Array}),expect(c[b].errors['gx-pin'][0]).toBe(a)})})}),describe('FORM_DATA_MERGE',function(){describe('WHEN values AND/OR errors are given',function(){it('SHOULD return the given values as part of the state',function(){var a='1234',c=(0,_formReducer2.default)({},{type:CONST.FORM_DATA_MERGE,formName:b,values:{"gx-pin":a}});expect(c[b].values).toBeNonEmptyObject(),expect(c[b].values).toImplement({"gx-pin":String}),expect(c[b].values['gx-pin']).toBe(a)}),it('SHOULD return the given errors as part of the state',function(){var a='this is an error',c=(0,_formReducer2.default)({},{type:CONST.FORM_DATA_MERGE,formName:b,errors:{"gx-pin":[a]}});expect(c[b].errors).toBeNonEmptyObject(),expect(c[b].errors).toImplement({"gx-pin":Array}),expect(c[b].errors['gx-pin'][0]).toBe(a)}),it('SHOULD return existing values + new values as part of the state',function(){var a='1234',c=(0,_formReducer2.default)(_defineProperty({},b,{values:{"gx-number":'A00001'}}),{type:CONST.FORM_DATA_MERGE,formName:b,values:{"gx-pin":a}});expect(c[b].values).toBeNonEmptyObject(),expect(c[b].values).toImplement({"gx-pin":String,"gx-number":String}),expect(c[b].values['gx-pin']).toBe(a),expect(c[b].values['gx-number']).toBe('A00001')}),it('SHOULD return remove all errors WHEN no errors are given',function(){var a=(0,_formReducer2.default)(_defineProperty({},b,{errors:{"gx-number":['this is an error']}}),{type:CONST.FORM_DATA_MERGE,formName:b,values:{"gx-pin":'1234'}});expect(a[b].errors).toBeUndefined()}),it('SHOULD return remove all errors WHEN empty error object is given',function(){var a=(0,_formReducer2.default)(_defineProperty({},b,{errors:{"gx-number":['this is an error']}}),{type:CONST.FORM_DATA_MERGE,formName:b,values:{"gx-pin":'1234'},errors:{}});expect(a[b].errors).toBeEmptyObject()})})}),describe('FORM_INPUT_CHANGE',function(){describe('WHEN an input value is given',function(){it('SHOULD return the given input field value as part of the state',function(){var a=(0,_formReducer2.default)({},{type:CONST.FORM_INPUT_CHANGE,formName:b,formInput:{"gx-pin":'1234'}});expect(a[b].values).toBeNonEmptyObject(),expect(a[b].values).toImplement({"gx-pin":String})}),it('SHOULD return the state of sibling inputs, IF there are any',function(){var a=(0,_formReducer2.default)(_defineProperty({},b,{values:{"gx-number":'007'}}),{type:CONST.FORM_INPUT_CHANGE,formName:b,formInput:{"gx-pin":'1234'}});expect(a[b].values).toBeNonEmptyObject(),expect(a[b].values).toImplement({"gx-pin":String,"gx-number":String})}),it('SHOULD always return a new state',function(){var a=_defineProperty({},b,{values:{"gx-pin":'1234'}}),c=(0,_formReducer2.default)(a,{type:CONST.FORM_INPUT_CHANGE,formName:b,formInput:{"gx-pin":'1234'}});expect(c).not.toBe(a),expect(c[b].values['gx-pin']).toBe(a[b].values['gx-pin'])}),it('SHOULD always return all other state members (like form errors)',function(){var a=_defineProperty({dummyProp:1},b,{values:{"gx-pin":'1234'},errors:{"gx-pin":['error message']}}),c=(0,_formReducer2.default)(a,{type:CONST.FORM_INPUT_CHANGE,formName:b,formInput:{"gx-pin":'1234'}});expect(c).toHaveMember('dummyProp'),expect(c[b]).toImplement({errors:Object})})})}),describe('FORM_VALIDATE',function(){describe('WHEN error messages are present',function(){it('SHOULD return error message',function(){var a=(0,_formReducer2.default)({},{type:CONST.FORM_VALIDATE,formName:b,errors:{"gx-pin":['error']}});expect(a[b]).toBeNonEmptyObject(),expect(a[b]).toImplement({errors:Object}),expect(a.Giftcard.errors['gx-pin']).toBeArrayOfStrings()}),it('SHOULD be able to return multiple error messages',function(){var c=(0,_formReducer2.default)(a,{type:CONST.FORM_VALIDATE,formName:b,errors:{"gx-number":['error'],"gx-pin":['error']}});expect(c).toBeNonEmptyObject(),expect(c[b].errors).toHaveMember('gx-number'),expect(c[b].errors).toHaveMember('gx-pin')}),it('SHOULD remove error messages WHEN no error is present',function(){var c=(0,_formReducer2.default)(a,{type:CONST.FORM_VALIDATE,formName:b,errors:{"gx-number":['error'],"gx-pin":''}});expect(c).toBeNonEmptyObject(),expect(c[b].errors['gx-pin']).toBeEmptyString()})})}),describe('FORM_SINGLE_VALIDATE',function(){describe('WHEN error messages are present',function(){it('SHOULD return error message',function(){var a=(0,_formReducer2.default)({},{type:CONST.FORM_SINGLE_VALIDATE,formName:b,errors:{"gx-pin":['error']}});expect(a[b]).toBeNonEmptyObject(),expect(a[b]).toImplement({errors:Object}),expect(a.Giftcard.errors['gx-pin']).toBeArrayOfStrings()}),it('SHOULD be able to return multiple error messages',function(){var c=(0,_formReducer2.default)(a,{type:CONST.FORM_SINGLE_VALIDATE,formName:b,errors:{"gx-number":['error'],"gx-pin":['error']}});expect(c).toBeNonEmptyObject(),expect(c[b].errors).toHaveMember('gx-number'),expect(c[b].errors).toHaveMember('gx-pin')}),it('SHOULD remove error messages WHEN no error is present',function(){var c=(0,_formReducer2.default)(a,{type:CONST.FORM_SINGLE_VALIDATE,formName:b,errors:{"gx-number":['error'],"gx-pin":''}});expect(c).toBeNonEmptyObject(),expect(c[b].errors['gx-pin']).toBeEmptyString()})})}),describe('FORM_RESET',function(){it('SHOULD reset the form state AND empty the input fields',function(){var c=(0,_formReducer2.default)(a,{type:CONST.FORM_RESET,formName:b});expect(c).toBeNonEmptyObject(),expect(c[b].errors).toBeEmptyObject(),expect(c[b].values).toBeEmptyObject()})}),describe('FORM_TRIGGER_VALIDATION',function(){it('SHOULD set the validation trigger to be true',function(){var c=(0,_formReducer2.default)(a,{type:CONST.FORM_TRIGGER_VALIDATION,formName:b,trigger:!0});expect(c).toBeNonEmptyObject(),expect(c[b].isTriggerValidation).toBe(!0)}),it('SHOULD set the validation trigger to be false',function(){var c=(0,_formReducer2.default)(a,{type:CONST.FORM_TRIGGER_VALIDATION,formName:b,trigger:!1});expect(c).toBeNonEmptyObject(),expect(c[b].isTriggerValidation).toBe(!1)})})});