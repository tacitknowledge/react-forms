'use strict';var _formGroupAsync=require('../../main/forms/formGroupAsync'),_formGroupAsync2=_interopRequireDefault(_formGroupAsync);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}describe('FormGroupAsync',function(){var a={formName:'addressForm',groups:['personal','address']};describe('Use this if you have multiple form groups\n    AND you want to submit the form only WHEN all groups are valid',function(){describe('initialise',function(){it('SHOULD assign init props correctly',function(){var b=new _formGroupAsync2.default(a);expect(b.formName).toBe(a.formName),expect(b.groups).toBeArrayOfStrings()}),it('SHOULD init all the necessary public methods\n        (resolve, reject, getName, getNames, each, success, fail)\n        ',function(){var b=new _formGroupAsync2.default(a);expect(b.resolve).toBeFunction(),expect(b.reject).toBeFunction(),expect(b.getName).toBeFunction(),expect(b.getNames).toBeFunction()}),it('SHOULD generate all the resolve callbacks with the correct names',function(){var b=new _formGroupAsync2.default(a);expect(b.resolvers).toHaveMember(a.formName+'-'+a.groups[0]),expect(b.resolvers).toHaveMember(a.formName+'-'+a.groups[1])}),it('SHOULD generate all the reject callbacks with the correct names',function(){var b=new _formGroupAsync2.default(a);expect(b.rejecters).toHaveMember(a.formName+'-'+a.groups[0]),expect(b.rejecters).toHaveMember(a.formName+'-'+a.groups[1])}),it('SHOULD generate a memo for resolved promises',function(){var b=new _formGroupAsync2.default(a);expect(b.resolvedMemo).toBeEmptyObject()})}),describe('Utility methods',function(){describe('getName - returns the name-spaced group name',function(){it('SHOULD return the "form name" + "group name" as a concatenated string',function(){var b=new _formGroupAsync2.default(a);expect(b.getName(a.groups[0])).toBe(a.formName+'-'+a.groups[0])}),it('SHOULD throw an error if group name is not found',function(){var b=new _formGroupAsync2.default(a);expect(b.getName.bind(b,'dummyGroup')).toThrowError()})}),describe('getNames - returns an array of name-spaced group names',function(){it('SHOULD return an array of group name ("form name" + "group name")',function(){var b=new _formGroupAsync2.default(a);expect(b.getNames()).toBeArrayOfStrings()})}),describe('each - iterates through each group and executes the given callback method',function(){it('SHOULD execute the given callback method',function(){var b=new _formGroupAsync2.default(a),c={fn:function fn(a){return a}};spyOn(c,'fn'),b.each(c.fn),expect(c.fn).toHaveBeenCalled()})})}),describe('Handling promises',function(){it('SHOULD create an empty array to contain success/fail callback methods',function(){var a=new _formGroupAsync2.default({formName:'addressForm',groups:['personal','address']});expect(a.successCallbacks).toBeEmptyArray(),expect(a.failCallbacks).toBeEmptyArray()}),describe('WHEN a group is resolved',function(){it('SHOULD store the resolved data in a memo',function(){var b=new _formGroupAsync2.default({formName:'addressForm',groups:['personal','address']}),c=b.getName(a.groups[0]);b.resolve({firstName:'John'},c),expect(b.resolvedMemo[c]).toBeObject()}),describe('AND resolved again',function(){it('SHOULD store the latest resolved data in the memo',function(){var b=new _formGroupAsync2.default({formName:'addressForm',groups:['personal','address']}),c=b.getName(a.groups[0]);b.resolvers[c]=void 0,b.resolve({firstName:'Ben'},c),expect(b.resolvedMemo[c].firstName).toBe('Ben')})}),describe('AND rejected',function(){it('SHOULD remove the resolved data from the memo',function(){var b=new _formGroupAsync2.default({formName:'addressForm',groups:['personal','address']}),c=b.getName(a.groups[0]);b.rejecters[c]=void 0,b.reject(['error msg'],c),expect(b.resolvedMemo[c]).toBeNull()})}),describe('AND all groups are resolved',function(){it('SHOULD call success method with correct data',function(b){var c={firstName:'John'},d={line1:'123 Downing St.'},e=new _formGroupAsync2.default({formName:'addressForm',groups:['personal','address']});e.resolve(c,e.getName(a.groups[0])),e.resolve(d,e.getName(a.groups[1])),e.then(function(a){expect(a.firstName).toBe(c.firstName),expect(a.line1).toBe(d.line1),b()}).fail(function(a){return b.fail('Error handler is called WHEN not intended | '+a)})})}),describe('AND another group is rejected',function(){var b,c;beforeEach(function(){b=new _formGroupAsync2.default({formName:'addressForm',groups:['personal','address']});var d=b.getName(a.groups[1]);b.rejecters[d]=function(){return null},c=b.getName(a.groups[0]),b.resolve({firstName:'John'},c),b.reject(['error msg'],b.getName(a.groups[1])).fail(function(){return null})}),it('SHOULD remember the resolved promise',function(){b.generatePromises(),expect(b.resolvedMemo[c]).toHaveMember('firstName')})})}),describe('WHEN a group is rejected',function(){it('SHOULD remove the group from the resolved memo',function(b){var c=new _formGroupAsync2.default({formName:'addressForm',groups:['personal','address']}),d=c.getName(a.groups[0]);c.reject(['error message'],d),c.fail(function(a){expect(a).toBeArrayOfStrings(),expect(c.resolvedMemo[d]).toBeNull(),b()})}),it('SHOULD call error method',function(b){var c=new _formGroupAsync2.default({formName:'addressForm',groups:['personal','address']});c.reject(['error message'],c.getName(a.groups[0])),c.then(function(){b.fail('Success handler is called WHEN not intended!')}).fail(function(a){expect(a).toBeArrayOfStrings(),b()})})})})})});