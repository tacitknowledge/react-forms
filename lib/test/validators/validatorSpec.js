'use strict';var _validator=require('../../main/validators/validator'),_validator2=_interopRequireDefault(_validator);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}describe('Validator',function(){describe('An adapter which transforms the backend validation rules and message\n     to the validate.js contraints format',function(){var a,b,c;beforeEach(function(){b={rules:{"gx-number":{required:!0},"gx-pin":{required:!0,minlength:4}},messages:{"gx-number":{required:function required(){return'Please enter a valid giftcard number'}},"gx-pin":{required:'Please enter a valid giftcard pin',minlength:'It has to be 4 characters long'}}}}),describe('Constructor',function(){describe('Receives a rules and message JSON object and stores it for internal reuse',function(){beforeEach(function(){a=new _validator2.default(b),c=a.constraints}),it('SHOULD adapt JSON rules and message to a compatible validator.js constraints',function(){expect(c.hasOwnProperty('gx-number')).toBe(!0),expect(c.hasOwnProperty('gx-pin')).toBe(!0),expect(c['gx-number'].hasOwnProperty('required')).toBe(!0),expect(c['gx-number'].required.hasOwnProperty('message')).toBe(!0);var a=b.messages['gx-pin'].required;expect(c['gx-pin'].required.message).toContain(a)})})}),describe('setConstraints',function(){beforeEach(function(){a=new _validator2.default(b),a.setConstraints({rules:{"gx-number":{required:!0}},messages:{"gx-number":{required:'Please enter a valid giftcard number'}}}),c=a.constraints}),it('SHOULD replace the old constraint with the given constraints',function(){expect(c['gx-pin']).toBeUndefined()})}),describe('validate',function(){describe('call this function to validate a set of values',function(){var b,d;beforeEach(function(){b={"gx-number":'123456789',"gx-pin":'1234'}}),beforeEach(function(){d={"gx-number":'',"gx-pin":''}}),it('SHOULD return empty string messages when data is valid',function(){var d=a.validate(b),e=a.validate(b,c);expect(d).toBeEmptyString(),expect(e).toBeEmptyString()}),it('SHOULD return error messages when data is invalid',function(){var b=a.validate(d),e=a.validate(d,c);expect(b).toBeDefined(),expect(b).toBeNonEmptyObject(),expect(b).toHaveArrayOfStrings('gx-number'),expect(e).toBeDefined(),expect(e).toBeNonEmptyObject(),expect(e).toHaveArrayOfStrings('gx-number')})})}),describe('single',function(){describe('call this function to validate a single value',function(){var b;beforeEach(function(){b={"gx-number":{minlength:{minlength:10,message:'^wrong'}}}}),it('SHOULD return empty string messages when data is valid',function(){var b=a.single('gx-number',{"gx-number":'value'});expect(b).toBeEmptyString()}),it('SHOULD return error messages when data is invalid',function(){var b=a.single('gx-number',{"gx-number":null});expect(b).toBeDefined(),expect(b).toBeNonEmptyArray(),expect(b).toBeArrayOfStrings('gx-number')}),it('SHOULD use passed custom constraints',function(){var c=a.single('gx-number',{"gx-number":'value'},b);expect(c).toBeDefined(),expect(c).toBeNonEmptyArray(),expect(c).toBeArrayOfStrings('gx-number'),expect(c).toContain('wrong')})})})})});